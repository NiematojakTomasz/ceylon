<project name="Ceylon Common module" default="publish" basedir=".">

    <property file="../user-build.properties" />
    <property file="../common-build.properties" />
    <property file="../lib/build.properties"/>
    <property file="build.properties" />

    <!-- Set build directories for all formats. -->
    <property name="build.dir" value="${basedir}/build" />
    <property name="build.bin" value="${build.dir}/bin" />
    <property name="build.dist" value="${build.dir}/dist" />
    <property name="build.dist.repo" value="${build.dist}/repo" />
    <property name="build.classes" location="${build.dir}/classes" />

    <property name="src" location="src" />
    <property name="test.src" location="test/src" />
    <property name="test.reports" location="${build.dir}/test-reports" />

    <!-- Local repository -->
    <property name="ceylon.repo.dir" location="${basedir}/../dist/dist/repo" />
    <property name="ceylon.bin.dir" location="${basedir}/../dist/dist/bin" />
    
    <property name="ceylon.common.dir" value="com/redhat/ceylon/common/${module.com.redhat.ceylon.common.version}" />
    <property name="ceylon.common.jar" value="${ceylon.common.dir}/com.redhat.ceylon.common-${module.com.redhat.ceylon.common.version}.jar" />
    <property name="ceylon.common.src" value="${ceylon.common.dir}/com.redhat.ceylon.common-${module.com.redhat.ceylon.common.version}.src" />
    <property name="ceylon.common.lib" location="${ceylon.repo.dir}/${ceylon.common.jar}" />
    <property name="ceylon.common.repo" value="${ceylon.repo.dir}/${ceylon.common.dir}" />
    <property name="ceylon.common.dist" value="${build.dist}/${ceylon.common.dir}" />

    <property name="versions.java" value="com/redhat/ceylon/common/Versions.java" />
    
    <!-- Classpath for the build tools. -->
    <path id="classpath">
        <pathelement path="${markdownpapers.lib}" />
    </path>

    <path id="test.run.classpath">
        <pathelement path="${build.classes}" />
        <pathelement path="${hamcrest.lib}" />
        <pathelement path="${junit.lib}" />
    </path>

    <!-- ################################################################## -->

    <target name="clean">
        <delete dir="${build.dir}" />
    </target>

    <!-- project compilation -->
    <target name="compile" depends="compile-versions" description="compile Ceylon common">
        <mkdir dir="${build.classes}" />
        <javac
            srcdir="${src}"
            destdir="${build.classes}"
            debug="true"
            encoding="UTF8"
            classpathref="classpath"
            target="${compile.java.target}"
            source="${compile.java.source}"
            bootclasspath="${compile.java.bootclasspath}">
            <include name="**/*.java" />
            <exclude name="${versions.java}" />
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="${src}">
                <include name="**/*" />
                <exclude name="**/*.java" />
            </fileset>
        </copy>
    </target>

    <!-- Compile Versions.java with the HEAD commit ID embedded -->
    <target name="compile-versions" description="compile filtered Versions.java">
        <mkdir dir="${build.classes}" />
        <exec executable="git" failonerror="yes" outputproperty="currentcommit">
            <arg value="rev-parse"/>
            <arg value="--short"/>
            <arg value="HEAD"/>
        </exec>
        <mkdir dir="${build.dir}/gen-src" />
        <filter token="commit" value="${currentcommit}" />
        <copy toDir="${build.dir}/gen-src" filtering="true">
            <fileset dir="${src}">
                <include name="${versions.java}" />
            </fileset>
        </copy>
        <javac
            srcdir="${build.dir}/gen-src"
            destdir="${build.classes}"
            debug="true"
            encoding="UTF8"
            classpathref="classpath"
            target="${compile.java.target}"
            source="${compile.java.source}"
            bootclasspath="${compile.java.bootclasspath}">
            <include name="${versions.java}" />
        </javac>
    </target>

    <target name="ceylon-common.jar" depends="compile">
        <mkdir dir="${build.dist.repo}/${ceylon.common.dir}"/>
        <mkdir dir="${build.bin}"/>
        <tstamp>
            <format property="qualifier" timezone="GMT" pattern="'v'yyyyMMdd-HHmm"/>
        </tstamp>    	
        <jar destfile="${build.dist.repo}/${ceylon.common.jar}">
            <fileset dir="${build.classes}">
            </fileset>
            <manifest>
                <attribute name="Bundle-SymbolicName" value="com.redhat.ceylon.common"/>
                <attribute name="Bundle-Version" value="${module.com.redhat.ceylon.common.version}.${qualifier}"/>
            </manifest>
        </jar>
        <antcall target="sha1sum">
            <param name="file" value="${build.dist.repo}/${ceylon.common.jar}" />
        </antcall>
    </target>

    <target name="build" depends="ceylon-common.jar">
        <mkdir dir="${build.bin}" />
        <copy todir="${build.bin}">
            <fileset dir="${basedir}/bin">
            </fileset>
            <filterset>
                <filter token="ceylon-version" value="${ceylon.base.version}"/>
            </filterset>
        </copy>
    </target>

    <!-- constant to declare a file binary for checksumsum -->
    <property name="checksum.binary-prefix" value=" *" />
    <!-- Helper target, used to create a sha1 checksum file  -->
    <!-- Requires 'file' as a parameter. -->
    <target name="sha1sum">
        <fail unless="file" />
        <fail if="filename" />
        <fail if="value" />
        <basename file="${file}" property="filename" />
        <checksum file="${file}" property="value" algorithm="sha1" />
        <echo file="${file}.sha1" message="${value}" />
    </target>

    <!-- Repository targets -->
    <target name="init.repo" description="Init local ceylon repository and add ceylon.common">
        <mkdir dir="${ceylon.common.repo}" />
    </target>

    <target name="clean.repo" description="Clean local ceylon repository">
        <delete file="${ceylon.common.lib}" />
        <delete file="${ceylon.common.lib}.sha1" />
        <delete file="${ceylon.repo.dir}/${ceylon.common.src}" />
        <delete file="${ceylon.repo.dir}/${ceylon.common.src}.sha1" />
    </target>

    <target name="ide-quick-internal">
        <property name="archivePath" value="${ceylon.common.lib}"/>
        <basename file="${archivePath}" property="archiveFileName"/>
        <property name="proxy-project" value="${eclipse.project.path}/required-bundle-proxies/${archiveFileName}"/>
        <mkdir dir="${proxy-project}"/>
        <delete failonerror="false" dir="${proxy-project}/META-INF"/>
        <copy toDir="${proxy-project}" overwrite="true">
            <zipfileset src="${archivePath}" includes="META-INF/**"/>
            <fileset file="${archivePath}"/>
        </copy>
        <manifest file="${proxy-project}/META-INF/MANIFEST.MF" mode="update">
            <attribute name="Bundle-Classpath" value="${archiveFileName}"/>
        </manifest>
    </target>

    <target name="dist" depends="build">
        <zip destfile="${build.dist.repo}/${ceylon.common.src}">
            <fileset dir="${src}">
                <include name="**/*.java"/>
            </fileset>
        </zip>
        <antcall target="sha1sum">
            <param name="file" value="${build.dist.repo}/${ceylon.common.src}"/>
        </antcall>
    </target>

    <target name="publish"
        depends="clean.repo,init.repo,dist,publish-internal"
        description="Publish both type checker and ceylon.language template module">
    </target>

    <target name="publish-internal" depends="init.repo">
        <copy todir="${ceylon.repo.dir}" overwrite="true">
            <fileset dir="${build.dist.repo}" />
        </copy>
        <copy todir="${ceylon.bin.dir}" overwrite="true">
            <fileset dir="${build.bin}" />
        </copy>
    </target>

    <target name="compile.tests">
        <mkdir dir="${build.classes}" />
        <javac
            srcdir="${test.src}"
            destdir="${build.classes}"
            debug="true"
            encoding="UTF8"
            classpathref="test.run.classpath"
            target="${compile.java.target}"
            source="${compile.java.source}"
            bootclasspath="${compile.java.bootclasspath}">
            <include name="**/*.java" />
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="${test.src}">
                <exclude name="**/*.java" />
            </fileset>
        </copy>
    </target>

    <target name="test"
        depends="publish,compile.tests,test-quick">
    </target>

    <target name="test-quick">
        <mkdir dir="${test.reports}" />
        <junit printsummary="yes" haltonfailure="no" failureproperty="test.failed">
            <classpath refid="test.run.classpath" />

            <formatter type="xml" />
            <test
                name="com.redhat.ceylon.common.test.AllCommonTests"
                fork="yes"
                todir="${test.reports}" />
        </junit>
        <junitreport todir="${test.reports}">
            <fileset dir="${test.reports}">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${test.reports}" />
        </junitreport>
        <fail message="Test failure detected, check test results." if="test.failed" />
    </target>
</project>
